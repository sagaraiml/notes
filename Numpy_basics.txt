Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> import numpy as np
>>> np.array([3,4,5])
array([3, 4, 5])
>>> a = np.array([3,4,5])
>>> type(a)
<class 'numpy.ndarray'>
>>> a[2] = 5
>>> a
array([3, 4, 5])
>>> a[2] = 0
>>> a
array([3, 4, 0])
>>> np.zeros((3,3))
array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])
>>> np.ones((2,4))
array([[1., 1., 1., 1.],
       [1., 1., 1., 1.]])
>>> np.full((2,2), 4)
array([[4, 4],
       [4, 4]])
>>> np.full((2,2), 7.2)
array([[7.2, 7.2],
       [7.2, 7.2]])
>>> np.full((2,2), 'treat')
array([['treat', 'treat'],
       ['treat', 'treat']], dtype='<U5')
>>> np.random.random((2,2))
array([[0.96320204, 0.55043932],
       [0.27558877, 0.0247172 ]])
>>> np.eye(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
>>> np.eye(3, 4)
array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.]])
>>> np.eye(3, k=1)
array([[0., 1., 0.],
       [0., 0., 1.],
       [0., 0., 0.]])
>>> np.arange(2, 14, 1)
array([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
>>> np.array([(2,3,4), [35,56,76], (1+1j,3.,2.)])
array([[ 2.+0.j,  3.+0.j,  4.+0.j],
       [35.+0.j, 56.+0.j, 76.+0.j],
       [ 1.+1.j,  3.+0.j,  2.+0.j]])
>>> np.linspace(2, 10, 10)
array([ 2.        ,  2.88888889,  3.77777778,  4.66666667,  5.55555556,
        6.44444444,  7.33333333,  8.22222222,  9.11111111, 10.        ])
>>> np.indices((2,3))
array([[[0, 0, 0],
        [1, 1, 1]],

       [[0, 1, 2],
        [0, 1, 2]]])
>>> np.indices((3, 2))#The array of grid indices, grid.shape = (len(dimensions),) + tuple(dimensions).
array([[[0, 0],
        [1, 1],
        [2, 2]],

       [[0, 1],
        [0, 1],
        [0, 1]]])
>>> np.indices((3,3))
array([[[0, 0, 0],
        [1, 1, 1],
        [2, 2, 2]],

       [[0, 1, 2],
        [0, 1, 2],
        [0, 1, 2]]])
>>> a = np.zeros((3,3), dtype=[('a', np.int32), ('b', np.float64, (3,3))])
>>> a['a']
array([[0, 0, 0],
       [0, 0, 0],
       [0, 0, 0]])
>>> a['b']
array([[[[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]]],


       [[[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]]],


       [[[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]]]])

>>> a['b'].shape
(3, 3, 3, 3)
>>> a['a'].shape
(3, 3)
>>> b = np.array([[1,2], [3, 4]])
>>> b[[0, 1], [0, 1]]
array([1, 4])
>>> np.array([a[0, 0], a[1, 1]])
array([(0, [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]),
       (0, [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]])],
      dtype=[('a', '<i4'), ('b', '<f8', (3, 3))])
>>> np.array([b[0, 0], b[1, 1]])
array([1, 4])
>>> b[[0, 1]]
array([[1, 2],
       [3, 4]])
>>> b
array([[1, 2],
       [3, 4]])
>>> x=np.array([[1,2],[3,4],[5,6]]);x
array([[1, 2],
       [3, 4],
       [5, 6]])
>>> y=np.array([[7,8],[9,10],[11,12]]);y
	       
array([[ 7,  8],
       [ 9, 10],
       [11, 12]])
>>> x+y
	       
array([[ 8, 10],
       [12, 14],
       [16, 18]])
>>> np.add(x,y)
	       
array([[ 8, 10],
       [12, 14],
       [16, 18]])
>>> x-y
	       
array([[-6, -6],
       [-6, -6],
       [-6, -6]])
>>> np.subtract(x,y)
	       
array([[-6, -6],
       [-6, -6],
       [-6, -6]])
>>> x*y ; np.multiply(x, y)
	       
array([[ 7, 16],
       [27, 40],
       [55, 72]])
array([[ 7, 16],
       [27, 40],
       [55, 72]])
>>> x/y ; np.divide(x,y)
	       
array([[0.14285714, 0.25      ],
       [0.33333333, 0.4       ],
       [0.45454545, 0.5       ]])
array([[0.14285714, 0.25      ],
       [0.33333333, 0.4       ],
       [0.45454545, 0.5       ]])
>>> np.sqrt(x)
	       
array([[1.        , 1.41421356],
       [1.73205081, 2.        ],
       [2.23606798, 2.44948974]])
>>> x;np.sum(x);np.sum(x, axis=0);np.sum(x, axis=1)
	       
array([[1, 2],
       [3, 4],
       [5, 6]])
21
array([ 9, 12])
array([ 3,  7, 11])
>>> x;x.T
	       
array([[1, 2],
       [3, 4],
       [5, 6]])
array([[1, 3, 5],
       [2, 4, 6]])
>>> np.array([1,2,3]);np.array([1,2,3]).T
	       
array([1, 2, 3])
array([1, 2, 3])
>>> v = np.array([1, 0, 1]);a = np.array([[1,2,3], [4,5,6], [7,8,9]]);a;v
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
array([1, 0, 1])
>>> np.add(a,v)#we can add these 2 array
array([[ 2,  2,  4],
       [ 5,  5,  7],
       [ 8,  8, 10]])
>>> np.tile(v, (3,1)) #3 repetation 1 time
array([[1, 0, 1],
       [1, 0, 1],
       [1, 0, 1]])
>>> np.tile(v, (3,0)) #3 repetation on 0 times
array([], shape=(3, 0), dtype=int32)
>>> np.tile(v, (3,2)) #3 repetation on 2 times
array([[1, 0, 1, 1, 0, 1],
       [1, 0, 1, 1, 0, 1],
       [1, 0, 1, 1, 0, 1]])
>>> v.shape
(3,)
>>> a.shape
(3, 3)
>>> a
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
>>> b = np.empty_like(a)
>>> b
array([[1, 0, 1],
       [1, 0, 1],
       [1, 0, 1]])
>>> w = np.array([4,5])
>>> v = np.array([1,2,3]);w = np.array([4,5]);v.shape;w.shape
(3,)
(2,)
>>> np.tile(v, (2,1))
array([[1, 2, 3],
       [1, 2, 3]])
>>> np.tile(v, (2,1)).shape
(2, 3)
>>> w = np.array([3,2,1]);w.shape
(3,)
>>> np.tile(v, (2,1))*w
array([[3, 4, 3],
       [3, 4, 3]])
>>> #delete everythng till here regarding outer product
>>> j = np.array([1,2,3]);k = np.array([4,5]);j.shape;k.shape
(3,)
(2,)
>>> np.reshape(j, (3, 1))
array([[1],
       [2],
       [3]])
>>> np.reshape(j, (3, 1)) * k
array([[ 4,  5],
       [ 8, 10],
       [12, 15]])
>>> w;w*2
array([4, 5])
array([ 8, 10])